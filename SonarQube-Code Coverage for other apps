SonarQube-Code Coverage for other apps
--------------------------------------
To implement SonarQubbe code coverage 
1)we need to have unit test cases in the project. 
2)We need to generate a coverage.xml file
3) Make sure to run sonar Coverage and unit testing after the build of application
To generate coverage.xml we need to see unit test are in which language and need to use that tool to generate coverage.xml

3) this needs to be passed to SonarQube.
By this the Code coverage will be displayed in the SonarQube

Example:
We can refer to this site for sonar coverage tools.
#https://docs.sonarsource.com/sonarqube-server/9.8/analyzing-source-code/test-coverage/dotnet-test-coverage/

Example2: If we are using only angualar application
----------------------------------------------------
parameters:
- name: sonarServer
  type: string
- name: sonarCliProjectName
  type: string
- name: sonarCliProjectKey
  type: string
- name: sonarCliSources
  type: string
- name: continueOnError
  type: boolean
  default: true
steps:
  - task: NodeTool@0
    inputs: 
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - task: JavaToolInstaller@0
    displayName: 'Use Java 17'
    inputs:
      versionSpec: 17
      jdkArchitectureOption: x64
      jdkSourceOption: 'LocalDirectory'
      jdkFile: 'D:\Java\Java17.zip'
      jdkDestinationDirectory: 'D:\Java\JavaDest\'
      cleanDestinationDirectory: true
    condition: and(succeeded(), eq(variables['Windows-Agent-server'], 'True'))

  - task: PowerShell@2
    displayName: Generate Coverage JavaScript
    inputs:
      targetType: 'inline'
      script: |
        npm install
        npm install jest
        npx jest --coverage --coverageReporters=lcov
    continueOnError: true
    enabled: true

  - task: SonarQubePrepare@5
    displayName: 'SonarQube'
    continueOnError: ${{ parameters.continueOnError }}
    inputs:
      SonarQube: ${{ parameters.sonarServer }}
      scannerMode: 'CLI'
      cliProjectKey: ${{ parameters.sonarCliProjectKey }}
      cliProjectName: ${{ parameters.sonarCliProjectName }}
      configMode: 'manual'
      cliSources: ${{ parameters.sonarCliSources }}
      extraProperties: |
        sonar.sources=${{ parameters.sonarCliSources }}
        sonar.qualitygate.wait=true
        sonar.javascript.lcov.reportPaths=coverage/lcov.info
        sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml

  - task: SonarQubeAnalyze@5
    continueOnError: ${{ parameters.continueOnError }}
    inputs:
      jdkversion: 'JAVA_HOME' # 'JAVA_HOME_11_X64' | 'JAVA_HOME_11_X64' | 'JAVA_HOME_17_X64'. Required. JDK version source for analysis. Default: JAVA_HOME_11_X64.

  - task: SonarQubePublish@5
    continueOnError: ${{ parameters.continueOnError }}
    inputs:
      pollingTimeoutSec: '300' # string. Required. Timeout (s). Default: 300.


Example 3: For python application and Angular application if we have 2 languages in an aplication:
---------------------------------------------------------------------------------------------------
If an application is using other language then we need to use that language specific tool to generate coverage.
Example; If we are having python application then we can use pytest to generate code coverage.


parameters:
  - name: sonarServer
    type: string

steps:
- task: NodeTool@0
  displayName: Use Node Version
  inputs:
    versionSpec: $(NodeVersion)
    checkLatest: true


- task: JavaToolInstaller@0
  displayName: 'Use Java 17'
  inputs:
    versionSpec: 17
    jdkArchitectureOption: x64
    jdkSourceOption: PreInstalled

- task: PowerShell@2
  displayName: Generate Coverage Python
  inputs:
    targetType: 'inline'
    script: |
      python -m venv env
      ./env/Scripts/activate
      pip install pytest
      pip install pytest-cov
      pip install urllib3
      pip install boto3
      pytest --cov=$(Build.SourcesDirectory) --cov-report=xml:PyCoverage/coverage.xml
      deactivate
  continueOnError: true
  enabled: true

- task: PowerShell@2
  displayName: Generate Coverage JavaScript
  inputs:
    targetType: 'inline'
    script: |
      npm  install jest
      npx jest --coverage --coverageReporters=lcov
  continueOnError: true
  enabled: true

- task: PowerShell@2
  displayName: Remove env
  inputs:
    targetType: 'inline'
    script: |
      Remove-Item -Path $(Build.SourcesDirectory)/env -Recurse
  continueOnError: true
  enabled: true

- task: SonarQubePrepare@7
  inputs:
    SonarQube: ${{ parameters.sonarServer }}
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(sonarKey)'
    cliProjectName: '$(sonarProject)'
    cliSources: '.'
    extraProperties: |
        sonar.python.coverage.reportPaths=PyCoverage/coverage.xml
        sonar.javascript.lcov.reportPaths=coverage/lcov.info
        sonar.qualitygate.wait=true

- task: SonarQubeAnalyze@7
  displayName: 'Run Code Analysis'
  condition: always()
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'

  
- task: SonarQubePublish@7
  displayName: 'Publish Quality Gate Results'
  condition: always()
  inputs:
    pollingTimeoutSec: '10000000'
  continueOnError: true

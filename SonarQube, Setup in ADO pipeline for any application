SOnarQube: Open source tool
YT : https://www.youtube.com/watch?v=y8UF7rgtDEo
Session 1 : Sonarqube
Session 2 : Sonarqube quality profiles and Gates etc
Session 3 : postgre installation
Session 4 : Maven and Gradle
Session 5 :
Session 6 :

SonarQube: It is Code quality and test management tool. It does the following
1) Code coverage: shows how much code is covered by the test cases
2) Bugs : a flaw or defect or error in the software's code that causes it to behave unexpectedly or not as intended.
3)Issue : Any problem which might block the development process, example : a third party driver you identified as dependency is not releasing on time, so it is an issue in your development process.
4)Vulnerabitlities : check for any external security attacks
5)Code Smell: Detects there could be a big problem in the code
6)Duplication : Finds duplicates in the code
7)Shows No of lines
8) Quality Gate: A quality gate is an indicator of code quality that can be configured to give a go/no-go signal on the current release-worthiness of the code. It indicates whether your code is clean and can move forward.
 * A passing (green) quality gate means the code meets your standard and is ready to be merged.
 * A failing (red) quality gate means there are issues to address.

Installation:
Linux:
You can install community edition docker container on Linux server and you can use it for the analysys.
you can see SonarQube Linux install page
NOTE: Dont install docker container because it uses H2 database on that server and if the scan results increase certain linit then sonarQube will not work
So better install sonar qube as an application on linux server and give connection to sql database.

Windows:
Download the sonar qube files and install it.
https://medium.com/kocsistem/sonarqube-installation-on-windows-server-4f6fe95b7440

Create Service connection in the ADO:
Create a Token in the Sonarqube by going to Account. Now, Create a Service connection in the ADO. While giving the SonarQube url in the service connection just give
http:SonarqubeServername:9000  in the service connection.

Agent server Requirements:
Install Java on the Agent server. check the version which version is suitable for installed sonarQube
Eg: Java 17 is required for SonarQube 9.9.3
[
On the build agent server what we used in build pipeline we need to install Java 17. 
(in the build make sure you user USe JAva task before Run Analysis task and select pre installed and select JAVA_HOME_17_X64)
go to environment variables-->system variables and set the environmental value
JAVA_HOME_17_X64 = C:\Program Files\Java\jdk-17
]

Create service connection from Azure to Sonarqube
Go to ADO --> Project settings --> service connections --Add a new service connection-- give sonar qube url
http://<servername:9000
It will ask for token

Go to sonarqube --click on Account on top right corner -- click on Myaccount --click on security -- 
Enter token name same as serviceconnection name and set to never expire and then generate token.
Add this token to ADO service connection.

Save token some where you do not loose it

In the ADO Build pipeline. This setup will work for any application like Dotnet, Java , Reactnative, etc
-------------------------------------------------------------------------------------------------------
Add SonarQube tasks from the Market place to the Organization.
Add below Tasks to the build
1) Prepare Analysis on SonarQube for .net application
 - Use Standalone scanner mostly
 - You can also use Integrate with MS build (if this is used you have to Prepare analysis before the MS build and Run Code 
   analysis after the MS build and VStests task)
2) Use Java Installer (Select Preinstalled)
3) Run Code Analysis 
4) Publist Quality Gate Results (This will upload results to the pipeline)
URl: https://docs.sonarsource.com/sonarqube/latest/devops-platform-integration/azure-devops-integration/

Yaml Pipeline Code:
------------------------
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '18'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'LocalDirectory'
      jdkFile: '/Users/tfsbuild/java-bin/java18-home.tar.gz'
      jdkDestinationDirectory: '/Users/tfsbuild/java-temp/'
      cleanDestinationDirectory: true
    displayName: install java
    enabled: true


  - task: JavaToolInstaller@0
    displayName: 'Use Java 18'
    inputs:
      versionSpec: '18'
      jdkArchitectureOption: x64
      jdkSourceOption: PreInstalled
    condition: eq(variables.isMain, true)      
  
  - task: SonarQubePrepare@5
    inputs:
      SonarQube: '<Service COnnection>'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: '<mobileApp>' This is the Project key name created in SonarQube 
      cliProjectName: '<mobileApp>' This is the Project key name created in SonarQube
      cliSources: '.'
    condition: eq(variables.isMain, true)

  - task: SonarQubeAnalyze@5
    inputs:
      jdkversion: 'JAVA_HOME'
    condition: eq(variables.isMain, true)
        
  - task: SonarQubePublish@5
    inputs:
      pollingTimeoutSec: '10000000'
    condition: eq(variables.isMain, true)


#This script attach workitem to the PR if not attached.
#Checks for merge conflicts, Approves pull request,
#Waits till the PR is completes for one condition defined below.

# Variables
$organization = "$(organization)" # Replace with your Azure DevOps organization name
$project = "$(project)"# Replace with your Azure DevOps project name
$repository = "$(repository)"  # Replace with your repository name
$workItemId = "$(workItemId)"  # Replace with your Work Item ID
$personalAccessToken = "$(personalAccessToken)"  # Replace with your Azure DevOps PAT. This PAT created using tfsbuild ID and the PAT name AutoApprovePullRequest.
$EmailList = $(EmailList)  #Multiple Emailid are comma separated Eg 'MedojuB2@AAswift.com','Sali@AAswift.com' just pass like this from the build.
$SourceBranch = "$(SourceBranch)"
$TargetBranch = "$(TargetBranch)"

$prId = "$(pullRequestId)"  #$(pullRequestId) # This value we will get from Create Pull Request task
$apiVersion = "?api-version=7.1-preview"
# Azure DevOps REST API URL of a  PR
$PullRequestapiurl = "https://ado.AAswift.com:8080/tfs/$organization/$project/_apis/git/repositories/$repository/pullrequests/$prId$apiVersion"
$WorkitemapiUrl = "https://ado.AAswift.com:8080/tfs/$organization/$project/_apis/git/repositories/$repository/pullrequests/$prId/workitems$apiVersion"



#Send Email Function
function SendEmail($Message, $body)
{
#$EmailList = 'MedojuB2@AAswift.com'

$secpasswd = ConvertTo-SecureString "<AwSPassword>" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential ("<AWS UserID>", $secpasswd)

#Send email
Import-Module Microsoft.PowerShell.Utility
Send-MailMessage -From 'tfs@AAswift.com' -To $EmailList -Subject $Message -Body "Hi,

$body.

Thanks,
AzureDevOps" -DeliveryNotificationOption OnSuccess, OnFailure -SmtpServer 'email-smtp.us-east-1.amazonaws.com' -Port 587 -Credential $cred -UseSsl
}


# Headers with the PAT for authentication
$headers = @{
 "Content-Type" = "application/json"
 "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$personalAccessToken"))
}


Write-Host PullRequestapiurl $PullRequestapiurl
Write-Host WorkitemApiUrl $WorkitemapiUrl


#Below script Assigns WorkItem to the PR if does not exist

if ($prId)
{

#***Checks for Workitems to the PR if there are no attached Workitems to the PR then it will assign workitem to it.
 try {
 # Get the Numer of Workitems linked to Pull request
  $Workitemresponse = Invoke-RestMethod -Uri $WorkitemapiUrl -Headers $headers -Method Get
 
  if ($Workitemresponse.count -gt 0) 
{
  #If  Workitems are linked then we are Not linking Workitem Just displaying how many number of workitems are linked.
  Write-Host "Number of Workitems linked to this PullRequest : $Workitemresponse.count "
  Write-Host "Work Items linked to Pull Request $prId :"
foreach ($workItem in $Workitemresponse.value) 
 {
 Write-Host "  - $($workItem.id) $($workItem.url)"
 }
  Write-Host "*** No Need of linking our Workitemid: $workItemId ***"

  
  $message1 = "WorkItem Already Exist to PR: $prId "
  $body1 = "merge from: $SourceBranch to $TargetBranch
  `nWorkItem Already Exist to PR: $prId 
  `nBuild Pipeline Name: $(Build.DefinitionName) 
  `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results 
  `nPullRequest Url https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_git/AAswift-core/pullrequest/$prId"
  SendEmail $message1 $body1

} 
 else {
 #If no Workitems are linked then we are linking Workitem
  Write-Host "Number of Workitems linked to this PullRequest : $Workitemresponse.count "
  Write-Host "No work items found linked to Pull Request $prId."
  Write-Host "Attaching Work Item ID: $workItemId $prId."

  
# Get the pull request details
$response = Invoke-RestMethod -Uri $PullRequestapiurl -Method Get -Headers $headers -ContentType "application/json-patch+json"

# Output response for debugging
#$response

$url= $response.artifactId
#Write-Host ArtifactID is $url
 

$requestUri = "https://ado.AAswift.com:8080/tfs/$organization/_apis/wit/workitems/${workitemid}?api-version=7.1-preview.3"

$json = @"
[ {
  "op": "add",
  "path": "/relations/-",
  "value": {
 "rel": "ArtifactLink",
 "url": "$url",
 "attributes": { "name": "pull request" }
  }
} ]
"@


$response1 = Invoke-RestMethod -Uri $requestUri -Headers $headers -ContentType "application/json-patch+json" -Method Patch -Body $json
Write-Host "*** Work Item ID: $workItemId is ATTACHED to the PR: $prId ***"

$message2 = "WorkItem $workItemId ATTACHED to PR: $prId"
$body2 = "merge from: $SourceBranch to $TargetBranch 
  `nWorkItem $workItemId ATTACHED to PR: $prId  
  `nBuild Pipeline Name: $(Build.DefinitionName) 
  `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results 
  `nPullRequest Url https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_git/AAswift-core/pullrequest/$prId"
SendEmail $message2 $body2

}
  } #End Try Block
  catch {
 Write-Error "Catch block is executing : $($_.Exception.Message)"
  }


#***Powershell code to check status of the pull request, merge conflicts and sends email if there are any conflicts
#If there are no conflicts it approves the PR and waits for 2 hours PR to complete its validation checks like PR Builds etc..
#We are waiting because if PR is complete then only the code will be merged to the target branch.
#till it is merged we will wait here because next pipeline or the stage will be merging from next branch to other branch.
  


try {
 # Invoke the REST API
# Make the GET request to get PR details
$response3 = Invoke-RestMethod -Uri $PullRequestapiurl -Method Get -Headers $headers -ContentType "application/json"
Write-Host "response3 echo is below"
echo $response3

 # Check if the request was successful
 if ($response3) {
  Write-Host "Pull Request Status:" $response3.status
  Write-Host "Pull Request Title:" $response3.title
  Write-Host "Pull Request MergeStatus:"$response3.mergeStatus
  #Write-Host "Pull Request URL:" $response3.url

  # Additional details
  Write-Host "Created By:" $response3.createdBy.displayName
  Write-Host "Creation Date:" $response3.creationDate
  if (($response3.status -eq "active") -and ($response3.mergeStatus -eq "queued"))
  {
  $queuecounter = 0
 while ((($response3.status -eq "active") -and ($response3.mergeStatus -eq "queued")) -and ($queuecounter -le 3)) 
 {
 $response3 = Invoke-RestMethod -Uri $PullRequestapiurl -Method Get -Headers $headers -ContentType "application/json"
 #Check for PR merge status to move from queued state to other states (Completed or Succeeded or conflicts).
 Write-Host "Waiting for PR merge status to move from queued state to other state."
 Start-Sleep -Seconds 120

 Write-Host "Waiting for 2 minutes....."

 Write-Host "queueCounter: $queuecounter"
 $queuecounter++
 }
 if($queuecounter -eq 4 )
 {
 Write-Host "Waited for 6 minutes PR is not moved from queued state to other state. Please check is there any issue in the PR $prid."

 $message9 = "Waited for 6 minutes PR is not moved from queued state to other state.$prid."
 $body9 = "merge from: $SourceBranch to $TargetBranch 
 `nWaited for 6 minutes PR is not moved from queued state to other state. Please check is there any issue in the PR $prid.
 `nBuild Pipeline Name: $(Build.DefinitionName) 
 `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results
 `nPullRequest Url https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_git/AAswift-core/pullrequest/$prId"
 SendEmail $message9 $body9
 }
}

  elseif (($response3.status -eq "active") -and ($response3.mergeStatus -eq "Conflicts"))
  {

Write-Host "PR is in Active state and there are merge Conflicts We can trigger next pipeline and email will be sent to the team regarding merge conflicts."
Write-Host "The pull request $prId has merge conflicts and cannot be approved."
  
  
  $message3 = "NOT Approved: PR: $prId has merge conflicts"
  $body3 = "merge from: $SourceBranch to $TargetBranch  
  `nThe pull request $prId has merge conflicts and cannot be approved. Please Resolve MERGE Conflicts and COMMENTS.
  `nBuild Pipeline Name: $(Build.DefinitionName) 
  `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results 
  `nPullRequest Url https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_git/AAswift-core/pullrequest/$prId"
  SendEmail $message3 $body3

  }
  elseif (($response3.status -eq "active") -and ($response3.mergeStatus -eq "succeeded"))
  {
  Write-Host "The pull request $prId has NO merge conflicts and can be approved." 
  
  # ***Approve the PR if there are no merge conflicts and merge status is Succeeeded***
  
  #$approvalUri = "https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift .NET/_apis/git/repositories/AAswift-core/pullrequests/$prId/reviewers/{reviewerId}?api-version=7.2-preview.1"
  $approvalUri = "https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift .NET/_apis/git/repositories/AAswift-core/pullrequests/$prId/reviewers/27130f33-fa25-4231-a9c5-15d04ab4463a?api-version=7.2-preview.1"
  echo $approvalUri
  # Create the approval request body (can include reviewer identity or other details)
  $approvalBody = @{
 # reviewer = @{
 #id = "27130f33-fa25-4231-a9c5-15d04ab4463a"  # Replace with the Azure DevOps user ID of the reviewer
#  }
  vote = 10 # 10 means approve
  } | ConvertTo-Json -Depth 3
  
  # Make the POST request to approve the PR
  $approvalResponse = Invoke-RestMethod -Uri $approvalUri -Method PUT -Headers $headers -Body $approvalBody -ContentType "application/json"
  
  Write-Host "Pull Request #$prId has been approved."
  #Send Email
  $message4 = "Approved : PR : $prId-NO merge conflicts"
  $body4 = "merge from: $SourceBranch to $TargetBranch
  `nThe pull request $prId has NO merge conflicts and is approved by tfsbuild.
  `nBuild Pipeline Name: $(Build.DefinitionName) 
  `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results 
  `nPullRequest Url https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_git/AAswift-core/pullrequest/$prId"
  SendEmail $message4 $body4
  
  #Waiting for the PR to complete all its validation checks like PR builds, and other checks

  $counter = 0
 while ((($response3.status -eq "active") -and ($response3.mergeStatus -eq "succeeded")) -and ($counter -le 40)) 
 {
 $response3 = Invoke-RestMethod -Uri $PullRequestapiurl -Method Get -Headers $headers -ContentType "application/json"
 #Check for PR complete or it waits till 1 hour and then skips.
 Write-Host "Waiting for PR to complete."
 Start-Sleep -Seconds 180

 Write-Host "Waiting for 3 minutes....."

 Write-Host "Counter: $counter"
 $counter++
 }
 if($counter -eq 41)
 {
 Write-Host "Waited for 2 hours PR is not completed Yet. Please check is there any issue in the PR $prid."

 $message6 = "Waited for 2 hours PR is not completed Yet.$prid."
 $body6 = "merge from: $SourceBranch to $TargetBranch 
 `nWaited for 2 hours PR is not completed Yet. Please check is there any issue in the PR $prid.
 `nBuild Pipeline Name: $(Build.DefinitionName) 
 `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results
 `nPullRequest Url https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_git/AAswift-core/pullrequest/$prId"
 SendEmail $message6 $body6
 }
 elseif (($response3.status -eq "Abandoned") -or ($response3.mergeStatus -eq "Draft"))
{
  #If some one rejects or Abondoned PR then we will get email from here
Write-Host "We received below status for PR"
Write-Host "Pull Request Status:" $response3.status
Write-Host "Pull Request Title:" $response3.title
Write-Host "Pull Request MergeStatus:"$response3.mergeStatus

[string] $status = $response3.status
[string] $title = $response3.title
[string] $mergeStatus = $response3.mergeStatus
  
 $message8 = "different status for the PR $prid."
 $body8 = "merge from: $SourceBranch to $TargetBranch 
`nWe have received different status for the PR $prid
`nPull Request Status: $status
`nPull Request Title: $title
`nPull Request MergeStatus: $mergeStatus 
 `nBuild Pipeline Name: $(Build.DefinitionName) 
 `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results"
 SendEmail $message8 $body8
}
 else{
 Write-Host "PR is completed!"
 }

}
  elseif (($response3.status -eq "completed") -and ($response3.mergeStatus -eq "succeeded"))
  {
  Write-Host "PR is completed We can trigger next pipeline or Stage "
  }
  else
  {
  Write-Host "We have received below status for PR"
  Write-Host "Pull Request Status:" $response3.status
  Write-Host "Pull Request Title:" $response3.title
  Write-Host "Pull Request MergeStatus:"$response3.mergeStatus
  
 [string] $status = $response3.status
 [string] $title = $response3.title
 [string] $mergeStatus = $response3.mergeStatus
  
 $message7 = "different status for the PR $prid."
 $body7 = "merge from: $SourceBranch to $TargetBranch
`nWe have received different status for the PR $prid 
`nPull Request Status: $status
`nPull Request Title: $title
`nPull Request MergeStatus: $mergeStatus  
 `nBuild Pipeline Name: $(Build.DefinitionName) 
 `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=Build&view=results"
 SendEmail $message7 $body7
  
  }

 }
}
catch {
 Write-Error "Failed to retrieve pull request status: $($_.Exception.Message)"
}


}

else
{
Write-Host "Pull RequestID $prId is not created so skipping Workitem Assignment"


Write-Host "Pull RequestID  $prId is not created "
$message5 = "No changes to Merge - $SourceBranch to $TargetBranch"
$body5 = "No Changes to merge from $SourceBranch to $TargetBranch 
  `nPR: $prId is NOT created.
  `nBuild Pipeline Name: $(Build.DefinitionName) 
  `nBuild Url: https://ado.AAswift.com:8080/tfs/AAswiftdev/AAswift%20.NET/_build/results?buildId=$(Build.BuildId)&view=results"
SendEmail $message5 $body5


}
